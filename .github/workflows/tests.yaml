name: Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  run-tests:
    strategy:
      matrix:
        os: [macos-10.15, ubuntu-18.04, ubuntu-20.04]
        python-version: [3.8, 3.9]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install charmcraft and dependencies
        run: |
          case "${{ matrix.os }}" in
            ubuntu-*)
              sudo apt update
              sudo apt install -y python3-pip python3-setuptools python3-wheel python3-venv libapt-pkg-dev
              ;;
          esac
          python3 -m venv ${HOME}/.venv
          source ${HOME}/.venv/bin/activate
          pip install -U pip wheel setuptools
          case "${{ matrix.os }}" in
            ubuntu-18.04)
              # pip 20.2 breaks python3-apt, so pin the version before building
              pip install pip==20.1
              pip install -U -r requirements-bionic.txt
              ;;
            ubuntu-20.04)
              pip install -U -r requirements-focal.txt
              ;;
          esac
          pip install -U -r requirements-dev.txt
          pip install -e .
      - name: Run tests
        run: |
          source ${HOME}/.venv/bin/activate
          pytest -ra tests
    
  macos-smoke-tests:
    strategy:
      matrix:
        os: [macos-10.15]
        python-version: [3.8, 3.9]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install charmcraft and dependencies
        run: |
          pip install -U -r requirements.txt -e .
      - name: Mac OS Multipass Provider Smoke Tests
        run: |
          pushd "$(mktemp -d)"
          charmcraft -v init --author testuser
          charmcraft -v pack
          test -f *.charm
          charmcraft -v clean
          popd

  snap-build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Build snap
        uses: snapcore/action-build@v1
        id: snapcraft
      - name: Upload snap artifact
        uses: actions/upload-artifact@v2
        with:
          name: snap
          path: ${{ steps.snapcraft.outputs.snap }}

  snap-tests:
    needs: [snap-build]
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Download snap artifact
        uses: actions/download-artifact@v2
        with:
          name: snap
          path: snap-artifacts
      - name: Install snap
        run: |
          sudo snap install --classic --dangerous snap-artifacts/*.snap
          rm -rf snap-artifacts
      - name: Install test dependencies
        run: |
          sudo apt update
          sudo apt install -y python3-pip python3-setuptools python3-wheel
      - name: Install LXD dependency on 18.04
        if: ${{ matrix.os == 'ubuntu-18.04' }}
        run: |
          sudo apt remove -y lxd
          sudo snap install lxd
      - name: Refresh LXD dependency on 20.04
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          sudo snap refresh lxd
      - name: Configured LXD
        run: |
          sudo groupadd --force --system lxd
          sudo usermod --append --groups lxd $USER
          sudo snap start lxd
          sudo lxd waitready --timeout=30
          sudo lxd init --auto
      - name: Run smoke tests
        run: |
          pushd "$(mktemp -d)"
          charmcraft -v init --author testuser
          sg lxd -c "charmcraft -v pack"
          test -f *.charm
          sg lxd -c "charmcraft -v clean"
          popd

          pushd "$(mktemp -d)"
          sg lxd -c "charmcraft -v pack --project-dir ../charm-smoke-test"
          test -f *.charm
          sg lxd -c "charmcraft -v clean --project-dir ../charm-smoke-test"
          popd

          pushd "$(mktemp -d)"
          source /etc/os-release
          charmcraft -v init --author testuser
          sed -i "s|20.04|$VERSION_ID|g" charmcraft.yaml
          charmcraft -v pack --destructive-mode
          test -f "destructive-mode-tests_ubuntu-$VERSION_ID-amd64.charm"
          popd

          mkdir -p build-packages-test
          pushd build-packages-test
          charmcraft -v init --author testuser
          sed -i "s|20.04|$VERSION_ID|g" charmcraft.yaml
          touch extra_file.txt
          cat <<- EOF >> charmcraft.yaml
          parts:
            charm:
              prime:
                - extra_file.txt
            hello:
              plugin: nil
              build-packages: [hello]
              override-build: |
                hello > "\$CHARMCRAFT_PART_INSTALL/hello.txt"
          EOF
          sg lxd -c "charmcraft -v pack"
          unzip -c build-packages-test_*.charm hello.txt | grep "^Hello, world!"
          sg lxd -c "charmcraft -v clean"
          rm *.charm
          sudo apt install -y hello
          charmcraft -v pack --destructive-mode
          unzip -c build-packages-test_*.charm hello.txt | grep "^Hello, world!"
          popd

          sudo snap set charmcraft provider=lxd
          sudo snap set charmcraft provider=multipass
          if sudo snap set charmcraft provider=invalid; then
            echo "configure script failure"
            exit 1
          fi
      - name: Linux Multipass Provider Tests
        run: |
          sudo snap set charmcraft provider=multipass

          pushd "$(mktemp -d)"
          charmcraft -v pack --project-dir ../charm-smoke-test
          test -f *.charm
          charmcraft -v clean --project-dir ../charm-smoke-test
          popd